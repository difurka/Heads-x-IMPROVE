{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Функция возвращающая массив с отсортированными массивами"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def list_of_lists(number_arrays):\n",
    "    import random\n",
    "    \n",
    "    MAX_length = 10 # максимальная длина массива\n",
    "    MAX_meaning = 1000 # максимальное значение в массивах\n",
    "\n",
    "    list_lengths_begin = [] # здесь будут находиться неповторяющиеся длины массивов, пока в произвольном порядке\n",
    "\n",
    "    # заполним list_lengths значениями\n",
    "    while len(list_lengths_begin) < number_arrays:\n",
    "        a = random.randint(1, MAX_length) \n",
    "        if a not in list_lengths_begin: list_lengths_begin.append(a)\n",
    "        \n",
    "    # сразу рассортируем длины массивов в нужном порядке   \n",
    "    list_lengths_even = sorted([i for i in list_lengths_begin if i%2 == 0])\n",
    "    list_lengths_odd = sorted([i for i in list_lengths_begin if i%2 != 0], reverse = True)\n",
    "    list_lengths = list_lengths_even+list_lengths_odd # итоговый список длин без повторений, в соответствующем порядке\n",
    "\n",
    "    list_arrays = [0 for _ in range(number_arrays)] # здесь будет храниться список массивов\n",
    "    for i in range(number_arrays):\n",
    "        new_array = [random.randint(1, MAX_meaning) for _ in range(list_lengths[i])]\n",
    "        list_arrays[i] = new_array\n",
    "    return list_arrays  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Результат действия функции"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[924, 626, 510, 409],\n",
       " [622, 571, 231, 891, 662, 682, 871, 563],\n",
       " [456, 195, 229, 499, 559, 337, 201, 671, 382, 170],\n",
       " [182, 994, 931, 360, 2],\n",
       " [314, 89, 482],\n",
       " [250]]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_lists(6)   "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
